#!/usr/bin/perl -w
# Kvalobs_Metadata - Free Quality Control Algorithms for Meteorological Observations 
#
# $Id$
#
# Copyright (C) 2007 met.no
#
# Contact information:
# Norwegian Meteorological Institute
# Box 43 Blindern
# 0313 OSLO
# NORWAY
# email: kvalobs-dev@met.no
#
# This file is part of KVALOBS_METADATA
# 
# KVALOBS_METADATA is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 
# of the License, or (at your option) any later version.
#
# KVALOBS_METADATA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with KVALOBS_METADATA; if not, write to the Free Software Foundation Inc., 
# 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


# QC1-1 er testen dette gjelder for


# $## betyr en kolonne vi kan se bort i fra

# medium_qcx1 = QC1-1_stasjonsGrenser
# time=month
# splitter="\\s+"
# $stationid $paramid $month highest high low lowest

# $## betyr en kolonne vi kan se bort i fra
# medium_qcx2 = QC1-1_fasteGrenser
# time2=0
# splitter2="\\s+"
# $stationid $paramid highest high low lowest

# medium_qcx3 = QC1-1param
# time3=0
# splitter3=";"
# $paramid $level min max

# medium_qcx4 = QC1-1extra
# time4=0
# splitter4="\\s+"
# $stationid $paramid max;highest;high;low;lowest;min

# Dette scriptet tar 4-5 argumenter $arg, QC1-1_stasjonsGrenser, QC1-1_fasteGrenser, QC1-1param og QC1-1extra der det siste argumentet er frivillig.
# $arg er det første argumentet og kan ha verdiene all, gen og ins
# QC1-1_stasjonsGrenser er det andre argumentet, 
# QC1-1_fasteGrenser er det tredje argumentet, 
# QC1-1param er det fjerde argumentet og 
# QC1-1extra er det femte argumentet og er frivillig.
                                             
use POSIX;
use strict;
use intodb;
use logdbQC;
use dbQC;

my $QCX = "QC1-1";
my $fromtime= get_fromtime();
#my $path= get_station_param_path();

my $arg       = $ARGV[0];
my $outfilename= $QCX.".out";

my %m_station;
my %m_param;
my %m_obs_pgm;

my %m_levsen;
my %m_metafile;

my $hour=-1;
my $default_level = 0;
my $default_sensor = '0';


if( $arg eq "gen" || $arg eq "all" ){   
my $obj= new logdbQC;
my %m_station_param;
 
my $fromfile  = station_param_name($ARGV[1]);
my $fromfile2 = station_param_name($ARGV[2]);
my $fromfile3 = station_param_name($ARGV[3]);

my $len_argv = @ARGV;

open(MYFILE,$fromfile3) or die "Can't open $fromfile: $!\n";


my $line;
my $splitter2=";";
while( defined($line=<MYFILE>) ){
    $line =~ s/^\s*(.*)\s*$/$1/;#Her utf?res en trim
      #last unless $line;

	if( length($line)>0 ){
	    my @sline=split /$splitter2/,$line;
            my $len=@sline;

	    my $paramid = trim($sline[0]);
            my $level = trim($sline[1]);
	    my $min    = trim($sline[2]);
            my $max    = trim($sline[3]);
	    $m_metafile{"$paramid,$level"}=[$min,$max];

            my @Arr;
	    if( !exists $m_levsen{$paramid}){ @Arr = (); }
	    else                            { @Arr = @{$m_levsen{$paramid}}; }
            push(@Arr,[$level]);
            $m_levsen{$paramid}=\@Arr;
		
	}
}

close(MYFILE);

#my @paramlist=(61,227);
#my $paramid;
#foreach $paramid(@paramlist){
#    my $ref = $m_levsen{$paramid};
#    my @Arr = @{$ref};
#    my $lenArr = @Arr;
#    print "length(@Arr)= "; print $lenArr; print "\n";
#    for( my $i=0; $i<$lenArr; $i++ ){
#         my $level = $Arr[$i]->[0];
#         my $sensor = $Arr[$i]->[1];
#         print "level= $level \n";
#         print "sensor= $sensor \n";
#    }
#}



%m_obs_pgm = fill_obs_pgm();
%m_station = fill_station();
%m_param = fill_param();


#my $stationid=60;
#my @paramlist=(106,18,34);
#my $paramid;
#foreach $paramid(@paramlist){
#    my $ref = $m_levsen{$paramid};
#    my @Arr = @{$ref};
#    my $lenArr = @Arr;
#    print "length(@Arr)= "; print $lenArr; print "\n";
#    for( my $i=0; $i<$lenArr; $i++ ){
#         my $level = $Arr[$i]->[0];
#         my $sensor = $Arr[$i]->[1];
#         print "level= $level \n";
#         print "sensor= $sensor \n";
#    }
#}

#exit 0;



my %hfromday=fhfromday();
my %htoday=fhtoday();

  
my $outfile= '>'.$outfilename;
open(MYFILEOUT,$outfile) or die "Can't open  $outfile: $!\n";
  #print "$outfilename \n";
 


my $splitter="\\s+";
open(MYFILE,$fromfile) or die "Can't open $fromfile: $!\n";
while( defined($line=<MYFILE>) ){
      $line=trim($line);
      
      if( length($line)>0 ){
	    my @sline=split /$splitter/,$line;
	    my $len=@sline;

            my $stationid = trim($sline[0]);
	    my $paramid = trim($sline[1]);
            my $month = trim($sline[2]);
	    my $fromday = $hfromday{"$month"};
            my $today   = $htoday{"$month"};
            

            
	 $obj->not_auto( $stationid, $paramid, $month, \%m_param, \%m_station, \%m_obs_pgm, \%m_station_param );
           

         if(exists $m_param{"$paramid"} && 
            !exists $m_station_param{"$stationid,$paramid,$month"}){ 
            my $b=1;
            if( $stationid != 0 ){
		if( exists $m_station{"$stationid"} ){ 
                    if(!exists $m_obs_pgm{"$stationid,$paramid"} ){
			$b=0;
	            }
		}else{
		    $b=0;
		}
                
            }
            if( $b ) {
		$m_station_param{"$stationid,$paramid,$month"}=1;
		 my $highest = trim($sline[3]);
                 my $high = trim($sline[4]);
                 my $low = trim($sline[5]);
                 my $lowest = trim($sline[6]);
		 OK_obs_pgm($stationid,$paramid,$fromday,$today,$highest,$high,$low,$lowest);
	    }

	} 
	}
  }

close(MYFILE);



open(MYFILE,$fromfile2) or die "Can't open $fromfile: $!\n";
while( defined($line=<MYFILE>) ){
      $line=trim($line);
      
      if( length($line)>0 ){
	    my @sline=split /$splitter/,$line;
	    my $len=@sline;

            my $stationid = trim($sline[0]);
	    my $paramid = trim($sline[1]);
	    my $fromday = 1;
            my $today   = 365;
            
	    $obj->not_auto($stationid,$paramid,0, \%m_param, \%m_station, \%m_obs_pgm, \%m_station_param);
           
         if(exists $m_param{"$paramid"} && 
            !exists $m_station_param{"$stationid,$paramid"}){ 
            my $b=1;
            if( $stationid != 0 ){
		if( exists $m_station{"$stationid"} ){ 
                    if(!exists $m_obs_pgm{"$stationid,$paramid"} ){
			$b=0;
	            }
		}else{
		    $b=0;
		}
                
            }
            if( $b ) {
		$m_station_param{"$stationid,$paramid"}=1;
		my $highest = trim($sline[2]);
                my $high = trim($sline[3]);
                my $low = trim($sline[4]);
                my $lowest = trim($sline[5]);
		OK_obs_pgm($stationid,$paramid,$fromday,$today,$highest,$high,$low,$lowest);
	    }

	}# $auto && 
	}
}
close(MYFILE);

select(MYFILEOUT);

if( $len_argv > 4 ){
    my $fromfile4 = station_param_name($ARGV[4]);
    open(MYFILE,$fromfile4) or die "Can't open $fromfile: $!\n";
    # Under her så skrives ut filen QC1-1extra som er det fjerde argumentet

    while( defined($line=<MYFILE>) ){
      trim($line);
      
      if( length($line)>0 ){
	    my @sline=split /$splitter/,$line;
	    my $len=@sline;

            my $stationid = trim($sline[0]);
	    my $paramid = trim($sline[1]);
	    my $fromday = 1;
            my $today   = 365;
            my $sensor = $default_sensor;
	    my $level = $default_level;
            my $metadata = "max;highest;high;low;lowest;min\\n".trim($sline[2]);
            my $desc_metadata = "\\N";

	    $obj->not_auto($stationid,$paramid,0, \%m_param, \%m_station, \%m_obs_pgm, \%m_station_param );
	    select(MYFILEOUT);
	    
          if( exists $m_param{"$paramid"} && 
              !exists $m_station_param{"$stationid,$paramid"}){ 
            my $b=1;
            if( $stationid != 0 ){
		if( exists $m_station{"$stationid"} ){ 
                    if(!exists $m_obs_pgm{"$stationid,$paramid"} ){
			$b=0;
	            }
		}else{
		    $b=0;
		}   
            }
            if( $b ) {
		$m_station_param{"$stationid,$paramid"}=1;
                print "$stationid|$paramid|$level|$sensor|$fromday|$today|$hour|$QCX-$paramid|$metadata|$desc_metadata|$fromtime\n";

	    }
       
	}
	}
  }
}


$obj->print_log($QCX);

}


if( $arg eq "ins" || $arg eq "all" ){
    select(STDOUT);
    fintodb( ".", "station_param", $outfilename, $QCX, '|' );
}



#*******************
#functions




sub OK_obs_pgm{
    select(MYFILEOUT);
    my  ($stationid,$paramid,$fromday,$today,$highest,$high,$low,$lowest)= @_;
            my $desc_metadata = "\\N";          
            if( exists $m_levsen{$paramid}){
                #print "DOES Eksists paramid=$paramid~ \n";
		my $ref = $m_levsen{$paramid};
		my @Arr = @{$ref};
                my $is_default=0;
		my $lenArr = @Arr;
		for( my $i=0; $i<$lenArr; $i++ ){
		    my $level = $Arr[$i]->[0];
		    my $sensor = $default_sensor;
		    my $refmeta = $m_metafile{"$paramid,$level"};
                    my $min= $refmeta->[0];
                    my $max= $refmeta->[1];
                    if( $level == $default_level ){
                        $is_default=1;
		    }
                    my $metadata = "max;highest;high;low;lowest;min\\n$max;$highest;$high;$low;$lowest;$min";
                    print "$stationid|$paramid|$level|$sensor|$fromday|$today|$hour|$QCX-$paramid|$metadata|$desc_metadata|$fromtime\n";
                } 
                if( $is_default == 0 ){# må ha med denne for å være garantert å få med default_verdiene
		    #print "NOTISdefault paramid=$paramid+ \n";
		    my $level = $default_level;
		    my $sensor = $default_sensor;
                    my $max= $highest;
                    my $min= $lowest;
		    my $metadata = "max;highest;high;low;lowest;min\\n$max;$highest;$high;$low;$lowest;$min";
                    print "$stationid|$paramid|$level|$sensor|$fromday|$today|$hour|$QCX-$paramid|$metadata|$desc_metadata|$fromtime\n";
		}
            }
            else{
		#print "NOT Eksists paramid=$paramid* \n";
		my $level = $default_level;
		my $sensor = $default_sensor;
		my $max= $highest;
		my $min= $lowest;
		my $metadata = "max;highest;high;low;lowest;min\\n$max;$highest;$high;$low;$lowest;$min";
		print "$stationid|$paramid|$level|$sensor|$fromday|$today|$hour|$QCX-$paramid|$metadata|$desc_metadata|$fromtime\n";
	    }
}
