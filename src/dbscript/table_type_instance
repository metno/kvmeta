#!/usr/bin/perl -w
# Kvalobs_Metadata - Free Quality Control Algorithms for Meteorological Observations 
#
# $Id: station_param_all 3058 2011-08-26 14:30:13Z terjeer $
#
# Copyright (C) 2007 met.no
#
# Contact information:
# Norwegian Meteorological Institute
# Box 43 Blindern
# 0313 OSLO
# NORWAY
# email: kvalobs-dev@met.no
#
# This file is part of KVALOBS_METADATA
# 
# KVALOBS_METADATA is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation; either version 2 
# of the License, or (at your option) any later version.
#
# KVALOBS_METADATA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with KVALOBS_METADATA; if not, write to the Free Software Foundation Inc., 
# 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


use POSIX;
use strict;
use DBI;
use dbQC;
#use File::Copy;
#use Cwd qw(cwd);

my $INSTANCE;
my $TABLE;
my $argn = @ARGV;

if( $argn> 1 ){
   $INSTANCE = $ARGV[0];#SVV
   $TABLE    = $ARGV[1];
}else{
    print "Too few arguments \n";
}


my $kvpasswd=get_passwd();
my $dbh = DBI->connect('dbi:Pg:dbname=kvalobs',"kvalobs",$kvpasswd,{RaiseError => 1}) ||
	die "Connect failed: $DBI::errstr";


my $dbh2 = DBI->connect("dbi:Pg:dbname=$INSTANCE","kvalobs",$kvpasswd,{RaiseError => 1}) ||
	die "Connect failed: $DBI::errstr";



my $num_columns;
my $sth2=$dbh2->prepare("select count(*) from information_schema.columns where table_name='$TABLE'");
$sth2->execute;
if ( my @row = $sth2->fetchrow_array) {
    $num_columns=$row[0];
}
$sth2->finish;

print "TABLE=$TABLE \n";
print "num_columns= $num_columns \n";


my $placeholders = join ", ", ("?") x $num_columns;
#print "placeholders checks=$placeholders \n";

my $sth2_insert=$dbh2->prepare("insert into $TABLE values ($placeholders)");

my @not_NULL_stlist;
my $sth=$dbh->prepare("select distinct stationid from $TABLE where typeid is NOT NULL and stationid <> 0");
$sth->execute;
while ( my @row = $sth->fetchrow_array) {
    # print join(',',@row) , "\n";
    push(@not_NULL_stlist,$row[0]);
}
$sth->finish;

$sth2=$dbh2->prepare("truncate $TABLE");
$sth2->execute;
$sth2->finish;


if( scalar(@not_NULL_stlist) > 0 ){
    #print "HEI \n";

    my $not_NULL_stlist=join(',',@not_NULL_stlist);

    my @stlist_sql;
    my %stlist;
    $sth2=$dbh2->prepare("select distinct stationid, typeid from obs_pgm where stationid in ($not_NULL_stlist)");
    $sth2->execute;

    while ( my @row = $sth2->fetchrow_array) {
       #print join(',',@row) , "\n";
       push(@stlist_sql,"stationid=$row[0] and typeid=$row[1]");
       $stlist{$row[0]}{$row[1]}=-1;
    }
    $sth2->finish;

    my $lstlist_sql= '(' . join(') or (',@stlist_sql) . ')';
    print $lstlist_sql . "\n";

   $sth=$dbh->prepare("select * from $TABLE where ($lstlist_sql)");
   $sth->execute;
   while ( my @row = $sth->fetchrow_array) {
      # print join(',',@row) , "\n";
      $sth2_insert->execute(@row);
      $sth2->finish;
   }
   $sth->finish;
}


my @NULL_stlist;
$sth=$dbh->prepare("select distinct stationid from $TABLE where typeid is NULL and stationid <> 0");
$sth->execute;
while ( my @row = $sth->fetchrow_array) {
    # print join(',',@row) , "\n";
    push(@NULL_stlist,$row[0]);
}
$sth->finish;


if( scalar(@NULL_stlist) > 0 ){
    #print "HEI \n";
    my $NULL_stlist=join(',',@NULL_stlist);

    my @stlist;
    $sth2=$dbh2->prepare("select distinct stationid from obs_pgm where stationid in ($NULL_stlist)");
    $sth2->execute;
    while ( my @row = $sth2->fetchrow_array) {
        #print join(',',@row) , "\n";
        push(@stlist,$row[0]);
    }

    if( scalar(@stlist) > 0 ){
	my $lstlist=join(',',@stlist);

	$sth=$dbh->prepare("select * from $TABLE where stationid in ($lstlist)");
	$sth->execute;
	while ( my @row = $sth->fetchrow_array) {
	    # print join(',',@row) , "\n";
	    $sth2_insert->execute(@row);
	    $sth2->finish;
	}
	$sth->finish;
    }
}


$sth=$dbh->prepare("select * from $TABLE where stationid=0");
$sth->execute;
while ( my @row = $sth->fetchrow_array) {
      # print join(',',@row) , "\n";
      $sth2_insert->execute(@row);
      $sth2->finish;
}
$sth->finish;


$dbh->disconnect;
$dbh2->disconnect;
