#! /bin/bash

## Script to update metadata tables in Kvalobs.

set -a  # export variables to the environment of subsequent commands
set -e  # Exit if a simple shell command fails
#set -x  # for debugging, remove later

PGDATABASE=kvalobs
PGUSER=kvalobs

PSQL=psql
CLIENT_ENCODING=`$PSQL -tc "SHOW CLIENT_ENCODING"| tr -d ' '`
SERVER_ENCODING=`$PSQL -tc "SHOW SERVER_ENCODING"| tr -d ' '`
echo "CLIENT_ENCODING=${CLIENT_ENCODING}"
echo "SERVER_ENCODING=${SERVER_ENCODING}"

if [[ ( $CLIENT_ENCODING = LATIN1  &&  $SERVER_ENCODING = LATIN1  ) ]] ; then
   export LANG=latin1
fi

#if [ "z$PGHOST" = "z" ]; then
#	PGHOST=localhost
#fi

## ** Subroutines **
assert_table_not_empty() {
	NUM_ROWS=`psql -t -c "select count(*) from $1"`
	if [ $NUM_ROWS -eq 0 ]; then
		echo "ERROR: tabellen $1 er tom."
		exit 1
	fi
}

BINDIR=/usr/bin
LOGDIR=$HOME/var/log/insert_update_delete_table
mkdir -pv $LOGDIR

DATADIR=/var/lib
METAGET=$DATADIR/kvalobs/metaget

#if hash kvconfig 2>/dev/null; then
#    METAGET=$(kvconfig --datadir)/kvalobs/metaget
#fi

### METAGET=$(kvconfig --datadir)/kvalobs/metaget

KVMETA=kvmeta

if [ -n "$1" ]; then
   METAGET=$PWD
   echo "argumentet er $1"
   tar xvvjf $1
else
   mkdir -p -m700 "$METAGET"
   cd $METAGET
   if [[ ( $CLIENT_ENCODING = LATIN1  &&  $SERVER_ENCODING = LATIN1  ) ]] ; then
       wget -O - http://repo.met.no/data/metadata/obs/kvalobs/kvmeta.tar.bz2 | tar xvvj 
   else
       wget -O - http://repo.met.no/data/metadata/obs/kvalobs/kvmeta_UTF8.tar.bz2 | tar xvvj
   fi
fi

## ** MAIN **

#echo "Sletter tabellene metadatatype og station_metadata"
#$PSQL -a -c "TRUNCATE metadatatype CASCADE"

#echo "Oppdaterer tabellene metadatatype station_metadata";
#for TABLE in metadatatype station_metadata
#do
#    $PSQL -c "\copy $TABLE from $METAGET/$KVMETA/$TABLE.out DELIMITER '|'"
#    assert_table_not_empty $TABLE
#done

#echo "Sletter tabellen station der static=true";
#$PSQL -a -c "delete from station where static=true"

#echo "Oppdaterer tabellen station";
#for TABLE in station
#do
#    $PSQL -c "\copy $TABLE from $METAGET/$KVMETA/$TABLE.out DELIMITER '|'"
#    assert_table_not_empty $TABLE
#done



echo "Oppdaterer tabellen metadatatype";
for TABLE in metadatatype
do
    #$PSQL -c "\copy $TABLE from $METAGET/$KVMETA/$TABLE.out DELIMITER '|'"
    $BINDIR/insert_update_delete_table.pl localhost 5432 $TABLE $METAGET/$KVMETA/$TABLE.out unique nd > $LOGDIR/${TABLE}.log 2> $LOGDIR/${TABLE}.error_log
    assert_table_not_empty $TABLE
done

echo "Oppdaterer tabellen station";
for TABLE in station
do
    #$PSQL -c "\copy $TABLE from $METAGET/$KVMETA/$TABLE.out DELIMITER '|'"
    $BINDIR/insert_update_delete_table.pl localhost 5432 $TABLE $METAGET/$KVMETA/$TABLE.out unique "static=false" > $LOGDIR/${TABLE}.log 2> $LOGDIR/${TABLE}.error_log
    assert_table_not_empty $TABLE
done

echo "Oppdaterer tabellen checks";
for TABLE in checks
do
    #$PSQL -a -c "truncate table $TABLE"
    #$PSQL -c "\copy $TABLE from $METAGET/$KVMETA/$TABLE.out DELIMITER '|'"
    $BINDIR/insert_update_delete_table.pl localhost 5432 $TABLE $METAGET/$KVMETA/$TABLE.out unique "checkname='push6flag' AND active='* * * * *'" > $LOGDIR/${TABLE}.log 2> $LOGDIR/${TABLE}.error_log 
    assert_table_not_empty $TABLE
done

echo "Oppdaterer tabellene algorithms types param model qcx_info operator qc2_interpolation_best_neighbors station_metadata";
for TABLE in algorithms types param model qcx_info operator qc2_interpolation_best_neighbors station_metadata
do
    #$PSQL -a -c "truncate table $TABLE"
    #$PSQL -c "\copy $TABLE from $METAGET/$KVMETA/$TABLE.out DELIMITER '|'"
    $BINDIR/insert_update_delete_table.pl localhost 5432 $TABLE $METAGET/$KVMETA/$TABLE.out unique > $LOGDIR/${TABLE}.log 2> $LOGDIR/${TABLE}.error_log 
    assert_table_not_empty $TABLE
done


echo "Oppdaterer tabellene station_param obs_pgm";
for TABLE in station_param obs_pgm
do
    #$PSQL -a -c "truncate table $TABLE"
    #$PSQL -c "\copy $TABLE from $METAGET/$KVMETA/$TABLE.out DELIMITER '|'"
    $BINDIR/insert_update_delete_table_speed.pl localhost 5432 $TABLE $METAGET/$KVMETA/$TABLE.out unique > $LOGDIR/${TABLE}.log 2> $LOGDIR/${TABLE}.error_log 
    assert_table_not_empty $TABLE
done
