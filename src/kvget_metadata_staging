#! /bin/bash

## Script to update metadata tables in Kvalobs.

set -a  # export variables to the environment of subsequent commands
set -e  # Exit if a simple shell command fails
#set -x  # for debugging, remove later

# METASRC="http://repo.met.no/data/metadata/obs/kvalobs/kvmeta.tar.bz2"
# METASRC_UTF8="http://repo.met.no/data/metadata/obs/kvalobs/kvmeta_UTF8.tar.bz2"
METASRC="http://metakvalobs.met.no/kvalobs/kvmeta.tar.bz2"
METASRC_UTF8="http://metakvalobs.met.no/kvalobs/kvmeta_UTF8.tar.bz2"

DATADIR=/var/lib
METAGET=$DATADIR/kvalobs/metaget
META_LOCAL_SRC=""
PGDATABASE=kvalobs
: ${PGUSER:=$USER}
: ${PGPORT:=5432}
: ${PGHOST:=localhost}

PSQL=psql
only_down_load=false
force=false

function usage {
    echo
    echo " kvget-metadata --help -r -f -h dbhost -p dbport -u user -s metasrc -d destdir "
    echo
    echo "kvget-metadata installs the metadata from 'metasrc' if it is given"
    echo "or downloads the metadata from '$METASRC'."
    echo "The metadata is installed into a kvalobs database."
    echo
    echo "Options:"
    echo " -h dbhost The postgres database host to connect to, default PGHOST ($PGHOST)."
    echo " -r download only."
    echo " -f force update of the postgres tables"
    echo " -p dbport The port on the host to connect to, default PGPORT ($PGPORT)."
    echo " -u dbuser The user to connect to the database as, default PGUSER ($PGUSER)."
    echo " -s metasrc A tar file that contains the metadata to install, "
    echo "    default it is downloaded from $METASRC."
    echo " -d metadestdir The dest dir for the metadata file."
    echo " --help print this help screen and exit."
    echo
}


while [ "$1" != "" ]; do
  case $1 in
    "-h")
        shift
        PGHOST=$1
        ;;
    "-p")
        shift
        PGPORT=$1
        ;;
    "-u")
        shift
        PGUSER=$1
        ;;
    "-s")
        shift
        META_LOCAL_SRC=`readlink -f $1`
        ;;
    "-d")
        shift
        METAGET=$1
        ;;
    "-r")
        only_down_load=true
        ;;
    "-f")
        force=true
        ;;
    "--help")
        usage
        exit 0
        ;;
    *)
      echo "Invalid argument '$1'."
      echo
      usage
      exit 1
  esac
  shift
done



# Create a .pgpass file to use so we do not need to give the
# password for each call to psql
# It works by creating a temporary file. Get a filehandle (3) to the file
# and delete it. Set the PGPASSFILE environment variable to /proc/PID/fd/3
# write the credentials to the file. The file is automaticly removed on exit.

rm -f "$HOME/.pgpass.kvget.*"
PGPASSFILE=$(mktemp $HOME/.pgpass.kvget.XXXXXXX)
chmod 0600 $PGPASSFILE
exec 3>$PGPASSFILE
rm $PGPASSFILE
PGPASSFILE="/proc/$$/fd/3"
#echo "PGPASSFILE: $PGPASSFILE"

if [ -f $HOME/etc/kvdblist.conf ]; then
    echo "The file $HOME/etc/kvdblist.conf exists"
    KVDBLIST=`cat $HOME/etc/kvdblist.conf`
    for KVDB in $KVDBLIST
    do
        # echo $KVDB
        PGHOST=$KVDB
	if [ -f  $HOME/.pgpass ]; then
	    echo "The file $HOME/.pgpass does exist"
	    PGPASSWORD=`cat $HOME/.pgpass | grep $KVDB | grep "$PGDATABASE:$PGUSER" | cut -f5 -d:`
	    ## echo "$PGHOST:$PGPORT:$PGDATABASE:$PGUSER:$PGPASSWORD"
	    if [ -n  "$PGPASSWORD" ]; then
		echo "OK"
		echo "$PGHOST:$PGPORT:$PGDATABASE:$PGUSER:$PGPASSWORD" 1>&3
                # cat $HOME/.pgpass | grep $KVDB | grep 'kvalobs:kvalobs' 1>&3
	    else
	        echo "The content of the file $HOME/.pgpass does not match $HOME/etc/kvdblist.conf"
		continue
	    fi
	else
	    echo "The file $HOME/.pgpass does not exist"
            read -s -p "dbpassword: " PGPASSWORD
	    ## echo "$PGHOST:$PGPORT:$PGDATABASE:$PGUSER:$PGPASSWORD"
            echo "$PGHOST:$PGPORT:$PGDATABASE:$PGUSER:$PGPASSWORD" 1>&3
	fi
	
        VARn=`$PSQL --quiet --tuples-only -c 'select pg_is_in_recovery()'`
        VAR=`echo $VARn | tr -d '\n'`
        # echo -e "length(VAR)==$(echo -ne "${VAR}" | wc -m)"
        #if [ "z$VAR" != "z" ] && [ $VAR == "f" ]; then
        if [ "z$VAR" = "zf" ]; then
	    # echo "selected database is $KVDB" 
	    break 
        fi
    done
    # echo "mykvdb=$KVDB"    
else
    echo "The file $HOME/etc/kvdblist.conf does not exist"
    read -s -p "dbpassword ($PGHOST): " PGPASSWORD
    echo "$PGHOST:$PGPORT:$PGDATABASE:$PGUSER:$PGPASSWORD" 1>&3
fi

PGPASSWORD=""
echo "host: $PGHOST:$PGPORT" 
#exit 0
CLIENT_ENCODING=`$PSQL -tc "SHOW CLIENT_ENCODING"| tr -d ' '`
SERVER_ENCODING=`$PSQL -tc "SHOW SERVER_ENCODING"| tr -d ' '`
echo "CLIENT_ENCODING=${CLIENT_ENCODING}"
echo "SERVER_ENCODING=${SERVER_ENCODING}"

if [[ ( $CLIENT_ENCODING = LATIN1  &&  $SERVER_ENCODING = LATIN1  ) ]] ; then
   export LANG=latin1
fi

#if [ "z$PGHOST" = "z" ]; then
#	PGHOST=localhost
#fi

## ** Subroutines **
assert_table_not_empty() {
	NUM_ROWS=`$PSQL -t -c "select count(*) from $1"`
	if [ $NUM_ROWS -eq 0 ]; then
		echo "ERROR: tabellen $1 er tom."
		exit 1
	fi
}


#if hash kvconfig 2>/dev/null; then
#    METAGET=$(kvconfig --datadir)/kvalobs/metaget
#fi

### METAGET=$(kvconfig --datadir)/kvalobs/metaget

mkdir -p -m700 "$METAGET"
cd $METAGET
KVMETA=kvmeta

if [ -n "$META_LOCAL_SRC" ]; then
   echo "METASRC: $META_LOCAL_SRC"
   tar xvvjf $META_LOCAL_SRC
else
   if [[ ( $CLIENT_ENCODING = LATIN1  &&  $SERVER_ENCODING = LATIN1  ) ]] ; then
       echo "METASRC: $METASRC"
       wget -O - $METASRC | tar xvvj
   else
       echo "METASRC: $METASRC_UTF8"
       wget -O - $METASRC_UTF8 | tar xvvj
   fi
fi

if [ "$only_down_load" = "true" ]; then
    echo "Metadata downloaded to '$METAGET'"
    exit 0
fi

## ** MAIN **

if [ "$force" != true ]; then
    read -p "Update kvalobs metadata tables (y/n): " ANS
    if [ "$ANS" != "y" ]; then
        echo "Terminates the metadata update!"
        exit 0
    fi
fi

echo "Starting metadata update."

echo "Sletter tabellene metadatatype og station_metadata"
$PSQL -a -c "TRUNCATE metadatatype CASCADE"

echo "Oppdaterer tabellene metadatatype station_metadata";
for TABLE in metadatatype station_metadata
do
    $PSQL -c "\copy $TABLE from $METAGET/$KVMETA/$TABLE.out DELIMITER '|'"
    assert_table_not_empty $TABLE
done

echo "Sletter tabellen station der static=true";
$PSQL -a -c "delete from station where static=true"

echo "Oppdaterer tabellen station";
for TABLE in station
do
    $PSQL -c "\copy $TABLE from $METAGET/$KVMETA/$TABLE.out DELIMITER '|'"
    assert_table_not_empty $TABLE
done


echo "Oppdaterer tabellene algorithms checks station_param types param obs_pgm obs_pgm2 model qcx_info operator qc2_interpolation_best_neighbors priority";
for TABLE in algorithms checks station_param types param obs_pgm obs_pgm2 model qcx_info operator qc2_interpolation_best_neighbors priority
do
    $PSQL -a -c "truncate table $TABLE"
    $PSQL -c "\copy $TABLE from $METAGET/$KVMETA/$TABLE.out DELIMITER '|'"
    assert_table_not_empty $TABLE
done

echo "psql -f $DATADIR/kvalobs/utesperring/utesperring.sql"
psql -f $DATADIR/kvalobs/utesperring/utesperring.sql

# source $HOME/insert.source
